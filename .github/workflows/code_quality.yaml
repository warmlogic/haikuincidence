name: Code Quality Checks

on:
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.2.0"

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      #----------------------------------------------
      # load cached ~/.local for installing poetry
      #----------------------------------------------
      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/code_quality.yaml') }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: false
          virtualenvs-in-project: false
          installer-parallel: true

      #----------------------------------------------
      # load cached project if cache exists
      #----------------------------------------------
      - name: Load cached project
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install project if cache does not exist
      #----------------------------------------------
      - name: Install project if not cached
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install project if cache exists
      #----------------------------------------------
      - name: Install project if cached
        run: poetry install --no-interaction
      #----------------------------------------------
      # run linting and formatting checks
      #----------------------------------------------
      - name: Check formatting
        run: poetry run black --check --diff --color .

      - name: Check imports
        run: poetry run isort --check .

      - name: Check code style
        run: poetry run flake8 .


  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      #----------------------------------------------
      # load cached ~/.local for installing poetry
      #----------------------------------------------
      - name: Load cached $HOME/.local
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/code_quality.yaml') }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: false
          virtualenvs-in-project: false
          installer-parallel: true

      #----------------------------------------------
      # load cached project if cache exists
      #----------------------------------------------
      - name: Load cached project
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install project if cache does not exist
      #----------------------------------------------
      - name: Install project if not cached
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install project if cache exists
      #----------------------------------------------
      - name: Install project if cached
        run: poetry install --no-interaction
      #----------------------------------------------
      # install NLTK data
      #----------------------------------------------
      - name: Install NLTK data
        run: |
          poetry run python -c "import nltk; nltk.download('cmudict')"
      #----------------------------------------------
      # run tests
      #----------------------------------------------
      - name: Run tests
        run: poetry run pytest ./tests/
